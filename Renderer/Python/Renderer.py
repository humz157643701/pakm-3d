# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Renderer')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Renderer')
    _Renderer = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Renderer', [dirname(__file__)])
        except ImportError:
            import _Renderer
            return _Renderer
        try:
            _mod = imp.load_module('_Renderer', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Renderer = swig_import_helper()
    del swig_import_helper
else:
    import _Renderer
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Renderer.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _Renderer.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Renderer.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Renderer.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Renderer.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Renderer.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Renderer.SwigPyIterator_copy(self)

    def next(self):
        return _Renderer.SwigPyIterator_next(self)

    def __next__(self):
        return _Renderer.SwigPyIterator___next__(self)

    def previous(self):
        return _Renderer.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Renderer.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Renderer.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Renderer.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Renderer.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Renderer.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Renderer.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Renderer.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Renderer.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class LessPairDoubleInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LessPairDoubleInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LessPairDoubleInt, name)
    __repr__ = _swig_repr

    def __call__(self, x, y):
        return _Renderer.LessPairDoubleInt___call__(self, x, y)

    def __init__(self):
        this = _Renderer.new_LessPairDoubleInt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Renderer.delete_LessPairDoubleInt
    __del__ = lambda self: None
LessPairDoubleInt_swigregister = _Renderer.LessPairDoubleInt_swigregister
LessPairDoubleInt_swigregister(LessPairDoubleInt)

class LessPairDoubleXYZ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LessPairDoubleXYZ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LessPairDoubleXYZ, name)
    __repr__ = _swig_repr

    def __call__(self, x, y):
        return _Renderer.LessPairDoubleXYZ___call__(self, x, y)

    def __init__(self):
        this = _Renderer.new_LessPairDoubleXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Renderer.delete_LessPairDoubleXYZ
    __del__ = lambda self: None
LessPairDoubleXYZ_swigregister = _Renderer.LessPairDoubleXYZ_swigregister
LessPairDoubleXYZ_swigregister(LessPairDoubleXYZ)

class COLOR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COLOR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COLOR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _Renderer.COLOR_r_set
    __swig_getmethods__["r"] = _Renderer.COLOR_r_get
    if _newclass:
        r = _swig_property(_Renderer.COLOR_r_get, _Renderer.COLOR_r_set)
    __swig_setmethods__["g"] = _Renderer.COLOR_g_set
    __swig_getmethods__["g"] = _Renderer.COLOR_g_get
    if _newclass:
        g = _swig_property(_Renderer.COLOR_g_get, _Renderer.COLOR_g_set)
    __swig_setmethods__["b"] = _Renderer.COLOR_b_set
    __swig_getmethods__["b"] = _Renderer.COLOR_b_get
    if _newclass:
        b = _swig_property(_Renderer.COLOR_b_get, _Renderer.COLOR_b_set)

    def __init__(self, *args):
        this = _Renderer.new_COLOR(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array(self):
        return _Renderer.COLOR_Array(self)
    __swig_destroy__ = _Renderer.delete_COLOR
    __del__ = lambda self: None
COLOR_swigregister = _Renderer.COLOR_swigregister
COLOR_swigregister(COLOR)

OUTPUT_MINIMAL = _Renderer.OUTPUT_MINIMAL
OUTPUT_STANDARD = _Renderer.OUTPUT_STANDARD
OUTPUT_FULL = _Renderer.OUTPUT_FULL

def GetIndexedColor(iIndex):
    return _Renderer.GetIndexedColor(iIndex)
GetIndexedColor = _Renderer.GetIndexedColor

def CopyToRange(Offsets, Vector, iLowerLimit, iUpperLimit):
    return _Renderer.CopyToRange(Offsets, Vector, iLowerLimit, iUpperLimit)
CopyToRange = _Renderer.CopyToRange

def ConvertUnits(dValue, SourceUnits, TargetUnits):
    return _Renderer.ConvertUnits(dValue, SourceUnits, TargetUnits)
ConvertUnits = _Renderer.ConvertUnits

def CompatibleUnits(SourceUnits, TargetUnits, pErrorMessage=None):
    return _Renderer.CompatibleUnits(SourceUnits, TargetUnits, pErrorMessage)
CompatibleUnits = _Renderer.CompatibleUnits

def ReduceUnits(Units):
    return _Renderer.ReduceUnits(Units)
ReduceUnits = _Renderer.ReduceUnits

def AddNewUnits(NewUnit, BaseUnits):
    return _Renderer.AddNewUnits(NewUnit, BaseUnits)
AddNewUnits = _Renderer.AddNewUnits

def StripPath(Filename):
    return _Renderer.StripPath(Filename)
StripPath = _Renderer.StripPath

def AddExtensionIfMissing(Filename, Extension):
    return _Renderer.AddExtensionIfMissing(Filename, Extension)
AddExtensionIfMissing = _Renderer.AddExtensionIfMissing

def ReplaceFilenameSpaces(Filename):
    return _Renderer.ReplaceFilenameSpaces(Filename)
ReplaceFilenameSpaces = _Renderer.ReplaceFilenameSpaces

def RemoveExtension(Filename, Extension):
    return _Renderer.RemoveExtension(Filename, Extension)
RemoveExtension = _Renderer.RemoveExtension
class POINT_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, POINT_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, POINT_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iYarnIndex"] = _Renderer.POINT_INFO_iYarnIndex_set
    __swig_getmethods__["iYarnIndex"] = _Renderer.POINT_INFO_iYarnIndex_get
    if _newclass:
        iYarnIndex = _swig_property(_Renderer.POINT_INFO_iYarnIndex_get, _Renderer.POINT_INFO_iYarnIndex_set)
    __swig_setmethods__["YarnTangent"] = _Renderer.POINT_INFO_YarnTangent_set
    __swig_getmethods__["YarnTangent"] = _Renderer.POINT_INFO_YarnTangent_get
    if _newclass:
        YarnTangent = _swig_property(_Renderer.POINT_INFO_YarnTangent_get, _Renderer.POINT_INFO_YarnTangent_set)
    __swig_setmethods__["Location"] = _Renderer.POINT_INFO_Location_set
    __swig_getmethods__["Location"] = _Renderer.POINT_INFO_Location_get
    if _newclass:
        Location = _swig_property(_Renderer.POINT_INFO_Location_get, _Renderer.POINT_INFO_Location_set)
    __swig_setmethods__["dVolumeFraction"] = _Renderer.POINT_INFO_dVolumeFraction_set
    __swig_getmethods__["dVolumeFraction"] = _Renderer.POINT_INFO_dVolumeFraction_get
    if _newclass:
        dVolumeFraction = _swig_property(_Renderer.POINT_INFO_dVolumeFraction_get, _Renderer.POINT_INFO_dVolumeFraction_set)
    __swig_setmethods__["dSurfaceDistance"] = _Renderer.POINT_INFO_dSurfaceDistance_set
    __swig_getmethods__["dSurfaceDistance"] = _Renderer.POINT_INFO_dSurfaceDistance_get
    if _newclass:
        dSurfaceDistance = _swig_property(_Renderer.POINT_INFO_dSurfaceDistance_get, _Renderer.POINT_INFO_dSurfaceDistance_set)
    __swig_setmethods__["Orientation"] = _Renderer.POINT_INFO_Orientation_set
    __swig_getmethods__["Orientation"] = _Renderer.POINT_INFO_Orientation_get
    if _newclass:
        Orientation = _swig_property(_Renderer.POINT_INFO_Orientation_get, _Renderer.POINT_INFO_Orientation_set)
    __swig_setmethods__["Up"] = _Renderer.POINT_INFO_Up_set
    __swig_getmethods__["Up"] = _Renderer.POINT_INFO_Up_get
    if _newclass:
        Up = _swig_property(_Renderer.POINT_INFO_Up_get, _Renderer.POINT_INFO_Up_set)

    def __init__(self):
        this = _Renderer.new_POINT_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Renderer.delete_POINT_INFO
    __del__ = lambda self: None
POINT_INFO_swigregister = _Renderer.POINT_INFO_swigregister
POINT_INFO_swigregister(POINT_INFO)

class MESHER_ELEMENT_DATA(POINT_INFO):
    __swig_setmethods__ = {}
    for _s in [POINT_INFO]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MESHER_ELEMENT_DATA, name, value)
    __swig_getmethods__ = {}
    for _s in [POINT_INFO]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MESHER_ELEMENT_DATA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iLayer"] = _Renderer.MESHER_ELEMENT_DATA_iLayer_set
    __swig_getmethods__["iLayer"] = _Renderer.MESHER_ELEMENT_DATA_iLayer_get
    if _newclass:
        iLayer = _swig_property(_Renderer.MESHER_ELEMENT_DATA_iLayer_get, _Renderer.MESHER_ELEMENT_DATA_iLayer_set)
    __swig_setmethods__["iRegion"] = _Renderer.MESHER_ELEMENT_DATA_iRegion_set
    __swig_getmethods__["iRegion"] = _Renderer.MESHER_ELEMENT_DATA_iRegion_get
    if _newclass:
        iRegion = _swig_property(_Renderer.MESHER_ELEMENT_DATA_iRegion_get, _Renderer.MESHER_ELEMENT_DATA_iRegion_set)

    def __init__(self):
        this = _Renderer.new_MESHER_ELEMENT_DATA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Renderer.delete_MESHER_ELEMENT_DATA
    __del__ = lambda self: None
MESHER_ELEMENT_DATA_swigregister = _Renderer.MESHER_ELEMENT_DATA_swigregister
MESHER_ELEMENT_DATA_swigregister(MESHER_ELEMENT_DATA)


def GetMinMaxXY(Points, Min, Max):
    return _Renderer.GetMinMaxXY(Points, Min, Max)
GetMinMaxXY = _Renderer.GetMinMaxXY
MATERIAL_CONTINUUM = _Renderer.MATERIAL_CONTINUUM
SINGLE_LAYER_RVE = _Renderer.SINGLE_LAYER_RVE
STAGGERED_BC = _Renderer.STAGGERED_BC
SHEARED_BC = _Renderer.SHEARED_BC
NO_BOUNDARY_CONDITIONS = _Renderer.NO_BOUNDARY_CONDITIONS
class PROP_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PROP_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PROP_INFO, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _Renderer.delete_PROP_INFO
    __del__ = lambda self: None

    def __init__(self):
        this = _Renderer.new_PROP_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
PROP_INFO_swigregister = _Renderer.PROP_INFO_swigregister
PROP_INFO_swigregister(PROP_INFO)

class PROP_YARN_INFO(PROP_INFO):
    __swig_setmethods__ = {}
    for _s in [PROP_INFO]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PROP_YARN_INFO, name, value)
    __swig_getmethods__ = {}
    for _s in [PROP_INFO]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PROP_YARN_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TextileName"] = _Renderer.PROP_YARN_INFO_TextileName_set
    __swig_getmethods__["TextileName"] = _Renderer.PROP_YARN_INFO_TextileName_get
    if _newclass:
        TextileName = _swig_property(_Renderer.PROP_YARN_INFO_TextileName_get, _Renderer.PROP_YARN_INFO_TextileName_set)
    __swig_setmethods__["iYarn"] = _Renderer.PROP_YARN_INFO_iYarn_set
    __swig_getmethods__["iYarn"] = _Renderer.PROP_YARN_INFO_iYarn_get
    if _newclass:
        iYarn = _swig_property(_Renderer.PROP_YARN_INFO_iYarn_get, _Renderer.PROP_YARN_INFO_iYarn_set)

    def __init__(self):
        this = _Renderer.new_PROP_YARN_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Renderer.delete_PROP_YARN_INFO
    __del__ = lambda self: None
PROP_YARN_INFO_swigregister = _Renderer.PROP_YARN_INFO_swigregister
PROP_YARN_INFO_swigregister(PROP_YARN_INFO)

class PROP_NODE_INFO(PROP_INFO):
    __swig_setmethods__ = {}
    for _s in [PROP_INFO]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PROP_NODE_INFO, name, value)
    __swig_getmethods__ = {}
    for _s in [PROP_INFO]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PROP_NODE_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TextileName"] = _Renderer.PROP_NODE_INFO_TextileName_set
    __swig_getmethods__["TextileName"] = _Renderer.PROP_NODE_INFO_TextileName_get
    if _newclass:
        TextileName = _swig_property(_Renderer.PROP_NODE_INFO_TextileName_get, _Renderer.PROP_NODE_INFO_TextileName_set)
    __swig_setmethods__["iYarn"] = _Renderer.PROP_NODE_INFO_iYarn_set
    __swig_getmethods__["iYarn"] = _Renderer.PROP_NODE_INFO_iYarn_get
    if _newclass:
        iYarn = _swig_property(_Renderer.PROP_NODE_INFO_iYarn_get, _Renderer.PROP_NODE_INFO_iYarn_set)
    __swig_setmethods__["iNode"] = _Renderer.PROP_NODE_INFO_iNode_set
    __swig_getmethods__["iNode"] = _Renderer.PROP_NODE_INFO_iNode_get
    if _newclass:
        iNode = _swig_property(_Renderer.PROP_NODE_INFO_iNode_get, _Renderer.PROP_NODE_INFO_iNode_set)

    def __init__(self):
        this = _Renderer.new_PROP_NODE_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Renderer.delete_PROP_NODE_INFO
    __del__ = lambda self: None
PROP_NODE_INFO_swigregister = _Renderer.PROP_NODE_INFO_swigregister
PROP_NODE_INFO_swigregister(PROP_NODE_INFO)

class PROP_IMAGE_INFO(PROP_INFO):
    __swig_setmethods__ = {}
    for _s in [PROP_INFO]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PROP_IMAGE_INFO, name, value)
    __swig_getmethods__ = {}
    for _s in [PROP_INFO]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PROP_IMAGE_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iImageID"] = _Renderer.PROP_IMAGE_INFO_iImageID_set
    __swig_getmethods__["iImageID"] = _Renderer.PROP_IMAGE_INFO_iImageID_get
    if _newclass:
        iImageID = _swig_property(_Renderer.PROP_IMAGE_INFO_iImageID_get, _Renderer.PROP_IMAGE_INFO_iImageID_set)

    def __init__(self):
        this = _Renderer.new_PROP_IMAGE_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Renderer.delete_PROP_IMAGE_INFO
    __del__ = lambda self: None
PROP_IMAGE_INFO_swigregister = _Renderer.PROP_IMAGE_INFO_swigregister
PROP_IMAGE_INFO_swigregister(PROP_IMAGE_INFO)


def __lt__(*args):
    return _Renderer.__lt__(*args)
__lt__ = _Renderer.__lt__
class CTexGenRenderer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTexGenRenderer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CTexGenRenderer, name)
    __repr__ = _swig_repr

    def __init__(self, pRenderWindowInteractor=None):
        this = _Renderer.new_CTexGenRenderer(pRenderWindowInteractor)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Renderer.delete_CTexGenRenderer
    __del__ = lambda self: None
    PROP_NODE = _Renderer.CTexGenRenderer_PROP_NODE
    PROP_PATH = _Renderer.CTexGenRenderer_PROP_PATH
    PROP_SURFACE = _Renderer.CTexGenRenderer_PROP_SURFACE
    PROP_VOLUME = _Renderer.CTexGenRenderer_PROP_VOLUME
    PROP_AXES = _Renderer.CTexGenRenderer_PROP_AXES
    PROP_INTERFERENCE = _Renderer.CTexGenRenderer_PROP_INTERFERENCE
    PROP_ORIENTATION = _Renderer.CTexGenRenderer_PROP_ORIENTATION
    PROP_DOMAIN = _Renderer.CTexGenRenderer_PROP_DOMAIN
    PROP_DOMAINAXES = _Renderer.CTexGenRenderer_PROP_DOMAINAXES
    PROP_IMAGE = _Renderer.CTexGenRenderer_PROP_IMAGE
    PROP_INTERFERENCE_DEPTH = _Renderer.CTexGenRenderer_PROP_INTERFERENCE_DEPTH
    EXPORT_NODES = _Renderer.CTexGenRenderer_EXPORT_NODES
    EXPORT_PATH = _Renderer.CTexGenRenderer_EXPORT_PATH
    EXPORT_SURFACE = _Renderer.CTexGenRenderer_EXPORT_SURFACE
    EXPORT_DOMAIN = _Renderer.CTexGenRenderer_EXPORT_DOMAIN

    def RenderTextile(self, *args):
        return _Renderer.CTexGenRenderer_RenderTextile(self, *args)

    def RenderYarn(self, *args):
        return _Renderer.CTexGenRenderer_RenderYarn(self, *args)

    def RenderMesh(self, *args):
        return _Renderer.CTexGenRenderer_RenderMesh(self, *args)

    def RenderYarnMesh(self, *args):
        return _Renderer.CTexGenRenderer_RenderYarnMesh(self, *args)

    def RenderDomain(self, *args):
        return _Renderer.CTexGenRenderer_RenderDomain(self, *args)

    def RenderDomainAxes(self, *args):
        return _Renderer.CTexGenRenderer_RenderDomainAxes(self, *args)

    def RenderNodes(self, *args):
        return _Renderer.CTexGenRenderer_RenderNodes(self, *args)

    def RenderPaths(self, *args):
        return _Renderer.CTexGenRenderer_RenderPaths(self, *args)

    def RenderPath(self, Textile, iYarn):
        return _Renderer.CTexGenRenderer_RenderPath(self, Textile, iYarn)

    def RenderInterference(self, *args):
        return _Renderer.CTexGenRenderer_RenderInterference(self, *args)

    def RenderGrid(self, *args):
        return _Renderer.CTexGenRenderer_RenderGrid(self, *args)

    def RenderImage(self, *args):
        return _Renderer.CTexGenRenderer_RenderImage(self, *args)

    def SetBackgroundColor(self, Color):
        return _Renderer.CTexGenRenderer_SetBackgroundColor(self, Color)

    def RenderAxes(self):
        return _Renderer.CTexGenRenderer_RenderAxes(self)

    def ClearScene(self):
        return _Renderer.CTexGenRenderer_ClearScene(self)

    def RemoveProps(self, Type):
        return _Renderer.CTexGenRenderer_RemoveProps(self, Type)

    def SetPropsColor(self, Type, Color):
        return _Renderer.CTexGenRenderer_SetPropsColor(self, Type, Color)

    def GetNumProps(self, Type):
        return _Renderer.CTexGenRenderer_GetNumProps(self, Type)

    def GetYarnPropInfo(self, pProp):
        return _Renderer.CTexGenRenderer_GetYarnPropInfo(self, pProp)

    def GetNodePropInfo(self, pProp):
        return _Renderer.CTexGenRenderer_GetNodePropInfo(self, pProp)

    def GetImagePropInfo(self, pProp):
        return _Renderer.CTexGenRenderer_GetImagePropInfo(self, pProp)

    def GetProps(self, *args):
        return _Renderer.CTexGenRenderer_GetProps(self, *args)

    def GetNodeProps(self, Info, bIgnoreTextileName=False):
        return _Renderer.CTexGenRenderer_GetNodeProps(self, Info, bIgnoreTextileName)

    def RefreshYarn(self, YarnInfo):
        return _Renderer.CTexGenRenderer_RefreshYarn(self, YarnInfo)

    def RefreshTextile(self, TextileName):
        return _Renderer.CTexGenRenderer_RefreshTextile(self, TextileName)

    def ResetCamera(self, *args):
        return _Renderer.CTexGenRenderer_ResetCamera(self, *args)

    def RefreshView(self):
        return _Renderer.CTexGenRenderer_RefreshView(self)

    def Start(self, bTakeControl=True, iWidth=800, iHeight=600, bFullScreen=False):
        return _Renderer.CTexGenRenderer_Start(self, bTakeControl, iWidth, iHeight, bFullScreen)

    def TakeScreenShot(self, FileName, iMagnification=1):
        return _Renderer.CTexGenRenderer_TakeScreenShot(self, FileName, iMagnification)

    def SetParallelProjection(self, bParallelProjection):
        return _Renderer.CTexGenRenderer_SetParallelProjection(self, bParallelProjection)

    def GetRenderer(self):
        return _Renderer.CTexGenRenderer_GetRenderer(self)

    def GetInteractor(self):
        return _Renderer.CTexGenRenderer_GetInteractor(self)

    def SetCallback(self, pCallback):
        return _Renderer.CTexGenRenderer_SetCallback(self, pCallback)

    def SetXRay(self, bXRay):
        return _Renderer.CTexGenRenderer_SetXRay(self, bXRay)

    def SetTrimToDomain(self, bTrim):
        return _Renderer.CTexGenRenderer_SetTrimToDomain(self, bTrim)

    def SetYarnColor(self, iYarn, Color):
        return _Renderer.CTexGenRenderer_SetYarnColor(self, iYarn, Color)
    if _newclass:
        ApplyColor = staticmethod(_Renderer.CTexGenRenderer_ApplyColor)
    else:
        ApplyColor = _Renderer.CTexGenRenderer_ApplyColor

    def ApplyDefaultColor(self, pActor):
        return _Renderer.CTexGenRenderer_ApplyDefaultColor(self, pActor)

    def SaveTextileToVTK(self, *args):
        return _Renderer.CTexGenRenderer_SaveTextileToVTK(self, *args)

    def SaveMeshToVTK(self, FileName, Mesh):
        return _Renderer.CTexGenRenderer_SaveMeshToVTK(self, FileName, Mesh)

    def BeginBatch(self):
        return _Renderer.CTexGenRenderer_BeginBatch(self)

    def EndBatch(self):
        return _Renderer.CTexGenRenderer_EndBatch(self)

    def RemoveNodes(self):
        return _Renderer.CTexGenRenderer_RemoveNodes(self)

    def RemovePaths(self):
        return _Renderer.CTexGenRenderer_RemovePaths(self)

    def RemoveTextiles(self):
        return _Renderer.CTexGenRenderer_RemoveTextiles(self)

    def RemoveMeshes(self):
        return _Renderer.CTexGenRenderer_RemoveMeshes(self)

    def RemoveAxes(self):
        return _Renderer.CTexGenRenderer_RemoveAxes(self)

    def RemoveInterference(self):
        return _Renderer.CTexGenRenderer_RemoveInterference(self)

    def RemoveInterferenceDepth(self):
        return _Renderer.CTexGenRenderer_RemoveInterferenceDepth(self)

    def RemoveOrientations(self):
        return _Renderer.CTexGenRenderer_RemoveOrientations(self)

    def RemoveDomains(self):
        return _Renderer.CTexGenRenderer_RemoveDomains(self)

    def RemoveDomainAxes(self):
        return _Renderer.CTexGenRenderer_RemoveDomainAxes(self)

    def GetPolyData(self, Mesh):
        return _Renderer.CTexGenRenderer_GetPolyData(self, Mesh)

    def GetXRay(self):
        return _Renderer.CTexGenRenderer_GetXRay(self)

    def GetTrimToDomain(self):
        return _Renderer.CTexGenRenderer_GetTrimToDomain(self)

    def GetParallelProjection(self):
        return _Renderer.CTexGenRenderer_GetParallelProjection(self)
CTexGenRenderer_swigregister = _Renderer.CTexGenRenderer_swigregister
CTexGenRenderer_swigregister(CTexGenRenderer)

def CTexGenRenderer_ApplyColor(pActor, Color):
    return _Renderer.CTexGenRenderer_ApplyColor(pActor, Color)
CTexGenRenderer_ApplyColor = _Renderer.CTexGenRenderer_ApplyColor

# This file is compatible with both classic and new-style classes.


